import heapq
import networkx as nx
import matplotlib.pyplot as plt

def dijkstra(graph, start):
    queue = [(0, start)]
    visited = set()
    shortest_distances = {node: (float('inf'), '') for node in graph}
    shortest_distances[start] = (0, start)
    paths = {start: [start]}

    while queue:
        (dist, current_node) = heapq.heappop(queue)
        if current_node not in visited:
            visited.add(current_node)
            for neighbour, distance in graph[current_node].items():
                old_distance, _ = shortest_distances[neighbour]
                new_distance = dist + distance
                if new_distance < old_distance:
                    shortest_distances[neighbour] = (new_distance, current_node)
                    paths[neighbour] = paths[current_node] + [neighbour]
                    heapq.heappush(queue, (new_distance, neighbour))

    return shortest_distances, paths

if __name__ == '__main__':
    graph = {
        '1': {'2': 20, '3': 8, '9': 22, 'E1': 8, 'C1': 15},
        '2': {'1': 20, '8': 35, '36': 39, '34': 30, 'C1': 6, 'D1': 23},
        '3': {'1': 8, '6': 17, '4': 23, 'F1': 16},
        '4': {'3': 23, '7': 25, 'F1': 7, 'G1': 10, '13': 37},
        '5': {'7': 13, '14': 29, 'I1': 17, '16': 52},
        '6': {'3': 17, '11': 31, '12': 37, 'H1': 19, 'F1': 13},
        '7': {'8': 27, '4': 25, '5': 15, 'J1': 29, 'G1': 12, '17': 42},
        '8': {'D1': 23, '7': 27, '2': 35, '50': 9},
        '9': {'1': 22, 'A1': 11, 'B1': 20, 'E1': 13, '10': 32, '37': 35},
        '10': {'9': 32, '11': 33, '26': 8, '27': 23, '38': 37, 'B1': 15},
        '11': {'10': 33, '25': 16, '6': 31, 'H1': 13},
        '12': {'6': 37, '25': 9, '13': 15},
        '13': {'12': 15, '14': 7, '4': 37},
        '14': {'13': 7, '15': 17, '5': 29, 'I1': 17},
        '15': {'14': 19, '16': 30, '32': 22},
        '16': {'5': 52, '15': 30, '21': 12, '33': 27},
        '17': {'7': 42, '50': 49, '18': 22, 'J1': 16},
        '18': {'17': 22, '19': 10, '21': 44},
        '19': {'18': 10, '20': 21, '23': 34},
        '20': {'19': 21, '22': 29},
        '21': {'16': 12, '18': 44, '22': 18},
        '22': {'21': 18, '20': 29, '24': 18},
        '23': {'19': 34, '24': 44},
        '24': {'22': 18, '23': 44, '49': 54},
        '25': {'11': 16, '12': 9, '29': 22},
        '26': {'10': 8, '40': 36, '41': 42},
        '27': {'10': 23, '43': 30, '44': 39},
        '28': {'29': 19, '45': 33},
        '29': {'28': 19, '25': 22, '30': 14},
        '30': {'29': 14, '31': 12},
        '31': {'32': 24, '46': 30, '30': 12},
        '32': {'31': 24, '15': 22, '47': 32},
        '33': {'16': 27, '47': 43, '48': 39},
        '34': {'2': 30, '35': 42, '50': 31},
        '35': {'34': 42, '36': 21},
        '36': {'35': 42, '37': 16, '2': 39},
        '37': {'36': 16, '38': 26, '9': 35},
        '38': {'37': 26, '39': 37, '10': 37},
        '39': {'38': 37, '40': 10},
        '40': {'39': 10, '26': 36, '41': 36},
        '41': {'40': 36, '26': 42, '42': 13},
        '42': {'41': 13, '43': 28},
        '43': {'27': 30, '42': 28, '44': 26},
        '44': {'45': 7, '43': 26, '27': 39},
        '45': {'44': 7, '28': 33, '51': 35},
        '46': {'31': 30, '47': 12, '51': 20},
        '47': {'46': 12, '32': 32, '33': 43, '48': 45},
        '48': {'47': 45, '33': 39, '49': 18},
        '49': {'48': 18, '24': 54},
        '50': {'34': 31, '8': 9, '17': 49},
        '51': {'45': 35, '46': 20},
        'A1': {'9': 11},
        'B1': {'9': 20, '10': 15},
        'C1': {'1': 15, '2': 6},
        'D1': {'2': 23, '8': 23},
        'E1': {'1': 9, '9': 14},
        'F1': {'3': 17, '4': 8},
        'G1': {'4': 12, '7': 15},
        'H1': {'6': 19, '11': 13},
        'I1': {'5': 17, '14': 17},
        'J1': {'7': 29, '17': 16}
    }

    # 将图中的每个边的权重翻倍
    doubled_graph = {node: {neighbour: distance * 2 for neighbour, distance in neighbours.items()} for node, neighbours in graph.items()}

    shortest_distances, paths = dijkstra(doubled_graph, '20')
    for node, (distance, _) in shortest_distances.items():
        print(f"Path to {node}: {' -> '.join(paths[node])}, Distance: {distance}")